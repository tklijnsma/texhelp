#!/usr/bin/env python

import os
import texhelp
import argparse
import logging


logging.getLogger().setLevel(logging.INFO)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('bibfiles', metavar='N', type=str, nargs='+', help='list of tex files to analyze' )
    # parser.add_argument( '--bib', type=str, help='Compare the found citations to this bib file' )
    parser.add_argument( '--generate-bib', action='store_true', help='boolean')
    parser.add_argument('-v', '--verbose', action='store_true', help='boolean')
    parser.add_argument('--test', action='store_true', help='boolean')
    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    if args.generate_bib:
        interpreter = texhelp.BibInterpreter()
        formatter = texhelp.BibFormatter(cms_style=True)

        citations = []
        for bibfile in args.bibfiles:
            tree = interpreter.interpret_file(bibfile)
            citenames = []
            for node in tree.gen_blocks_by_name('entry'):
                node.citation = formatter.get_citation(node.block.get_text())
                citations.append(node.citation)

        outfile = args.bibfiles[0].replace('.bib', '_regenerated.bib')
        if outfile == args.bibfiles[0]: raise ValueError('Risking overwrite; path {0} exists'.format(outfile))
        bibtext = '\n\n'.join([ c.parse() for c in citations ])
        if args.test:
            print bibtext
        else:
            with open(outfile, 'w') as fp:
                fp.write(bibtext)
            logging.info('Wrote regenerated bib file to {0}'.format(outfile))

    else:
        # Simply print the found bib entries
        interpreter = texhelp.BibInterpreter()
        formatter = texhelp.BibFormatter(cms_style=False)
        for bibfile in args.bibfiles:
            tree = interpreter.interpret_file(bibfile)
            citenames = []
            for node in tree.gen_blocks_by_name('entry'):
                node.citation = formatter.get_citation(node.block.get_text())
                citename = node.citation.citename
                print citename


if __name__ == "__main__":
    main()